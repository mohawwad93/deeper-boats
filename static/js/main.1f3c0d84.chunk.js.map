{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["tf","require","names","App","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","input","tidy","resizeBilinear","browser","fromPixels","div","expandDims","executeAsync","then","res","font","textBaseline","i","boxes","scores","classes","valid_detections","boxes_data","dataSync","scores_data","classes_data","valid_detections_data","dispose","slice","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","fillText","loadGraphModel","className","this","accept","multiple","alt","onLoad","src","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1f3c0d84.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MagicDropzone from \"react-magic-dropzone\";\nimport './App.css';\n\n\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = '/best_web_model/model.json';\n\nconst names = ['boat']\n\nconst [modelWeight, modelHeight] = [640, 640];\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: \"\",\n    predictions: []\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then(model => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(canvas.width / image.naturalWidth, canvas.height / image.naturalHeight);\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight,\n    );\n\n  };\n\n  onImageChange = e => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    this.cropToCanvas(e.target, c, ctx);\n    const input = tf.tidy(() => {\n      return tf.image.resizeBilinear(tf.browser.fromPixels(c), [modelWeight, modelHeight])\n        .div(255.0).expandDims(0);\n    });\n    this.state.model.executeAsync(input).then(res => {\n      // Font options.\n      const font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n\n      const [boxes, scores, classes, valid_detections] = res;\n      const boxes_data = boxes.dataSync();\n      const scores_data = scores.dataSync();\n      const classes_data = classes.dataSync();\n      const valid_detections_data = valid_detections.dataSync()[0];\n\n      tf.dispose(res)\n\n      var i;\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = \"#00FFFF\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = \"#00FFFF\";\n        const textWidth = ctx.measureText(klass + \":\" + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n\n      }\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, , ] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(klass + \":\" + score, x1, y1);\n\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              \"Choose or drop a file.\"\n            )}\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}